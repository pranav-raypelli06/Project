import speech_recognition as sr
import webbrowser
import pyttsx3
import musicLibrary
import requests
from gtts import gTTS
import pygame
import os
import time

#NEWS_API_KEY = "29e35dd3510748878db33afffadbd0e2"
MIC_INDEX = 0



recognizer = sr.Recognizer()
engine = pyttsx3.init()
engine.setProperty('rate', 175)
pygame.mixer.init()

def speak_offline(text):
    engine.say(text)
    engine.runAndWait()

def speak(text):
    try:
        temp_dir = "temp_audio"
        os.makedirs(temp_dir, exist_ok=True)
        temp_file = os.path.join(temp_dir, "temp.mp3")

        tts = gTTS(text)
        tts.save(temp_file)

        if not pygame.mixer.get_init():
            pygame.mixer.init()

        pygame.mixer.music.load(temp_file)
        pygame.mixer.music.play()

        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)

    except Exception as e:
        print(f"[Speech Error] {e}")
        speak_offline(text)
    finally:
        try:
            if pygame.mixer.get_init():
                pygame.mixer.music.stop()
                pygame.mixer.music.unload()
            if os.path.exists(temp_file):
                os.remove(temp_file)
        except Exception as e:
            print(f"[Cleanup Error] {e}")


def processCommand(c):
    c = c.lower()
    if "open google" in c:
        webbrowser.open("https://google.com")
        speak("Opening Google.")
    elif "open youtube" in c:
        webbrowser.open("https://youtube.com")
        speak("Opening YouTube.")
    elif "open facebook" in c:
        webbrowser.open("https://facebook.com")
        speak("Opening Facebook.")
    elif "open linkedin" in c:
        webbrowser.open("https://linkedin.com")
        speak("Opening LinkedIn.")
    elif c.startswith("play "):
        song = c.split(" ", 1)[1]
        link = musicLibrary.music.get(song)
        if link:
            webbrowser.open(link)
            speak(f"Playing {song}.")
        else:
            speak("Sorry, I couldn't find that song.")
    elif "news" in c:
        try:
            r = requests.get(
                "https://newsapi.org/v2/top-headlines",
                params={"country": "in", "apiKey": NEWS_API_KEY}
            )
            data = r.json()
            articles = data.get("articles", [])
            if articles:
                speak("Here are the top 5 headlines.")
                for article in articles[:5]:
                    speak(article.get("title", "No title"))
                    time.sleep(0.5)
            else:
                speak("No news articles found at the moment.")
        except Exception as e:
            print(f"[News Error] {e}")
            speak("Sorry, I couldnâ€™t fetch the news.")
    else:
        output = aiProcess(c)
        speak(output)

if __name__ == "__main__":
    speak("Initializing Jarvis. Please wait...")
    print("Jarvis is running. Say 'Jarvis' to wake me up.")

    while True:
        try:
            with sr.Microphone(device_index=MIC_INDEX) as source:
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                print("Listening for wake word...")
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=2)

            try:
                word = recognizer.recognize_google(audio)
                print("Heard:", word)
            except sr.UnknownValueError:
                continue

            if word.lower() == "jarvis":
                speak("Yes?")
                with sr.Microphone(device_index=MIC_INDEX) as source:
                    print("Listening for your command...")
                    recognizer.adjust_for_ambient_noise(source, duration=0.3)
                    audio = recognizer.listen(source, timeout=6)
                    try:
                        command = recognizer.recognize_google(audio)
                        print("Command:", command)
                        processCommand(command)
                    except sr.UnknownValueError:
                        speak("Sorry, I didn't catch that.")

        except sr.WaitTimeoutError:
            pass
        except KeyboardInterrupt:
            speak("Goodbye.")
            break
        except Exception as e:
            print(f"[Error] {e}")
            time.sleep(1)
